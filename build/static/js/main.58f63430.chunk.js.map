{"version":3,"sources":["Game.js","App.js","serviceWorker.js","index.js"],"names":["Stars","props","StarArray","i","numberOfStars","push","react_default","a","createElement","key","className","Button","classNames","isCorrent","join","onClick","e","handleEqual","handleRefresh","refreshLeft","Anwser","selectedNmbs","_loop","selectedNumbers","handleUnpick","length","NumbersPool","numberPool","_loop2","usedNumbers","includes","handlePick","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","result","state","reduce","b","setState","prevState","resultMsg","concat","toConsumableArray","Math","floor","random","filter","element","handleReplay","_this2","Fragment","Game_Stars","Game_Button","Game_Anwser","Game_NumbersPool","Component","App","Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58f63430.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n// import ReactDOM from 'react-dom';\r\n// import PropTypes from 'prop-types'\r\n\r\nconst Stars = (props) => {\r\n    let StarArray = [];\r\n    for (let i = 0; i < props.numberOfStars; i++) {\r\n        StarArray.push(<span key={i} className=\"fa fa-star\"></span>);\r\n    }\r\n    return (\r\n        <div className=\"col-lg-3 offset-lg-1 col-sm-10 offset-sm-1 col-md-4 offset-md-0\">{StarArray}</div>\r\n    );\r\n};\r\n\r\nconst Button = (props) => {\r\n    let classNames = ['equal-mark', 'fas', props.isCorrent === true ? 'fa-check' : props.isCorrent === false ? 'fa-times' : 'fa-equals'];\r\n    return(\r\n        <div className=\"col-lg-3 col-md-3 col-sm-10 text-center\">\r\n            <i className={classNames.join(' ')} onClick={(e) => props.handleEqual(e)}></i>\r\n            <br />\r\n            <i className=\"fas fa-sync-alt\" onClick={(e) => props.handleRefresh(e)}>{props.refreshLeft}</i>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Anwser = (props) => {\r\n    const selectedNmbs = [];\r\n    for (let i = 0; i < props.selectedNumbers.length; i++) {\r\n        selectedNmbs.push(<span key={props.selectedNumbers[i]} className=\"num selected\" onClick={() => props.handleUnpick(props.selectedNumbers[i])}>{props.selectedNumbers[i]}</span>);\r\n    }\r\n    return(\r\n        <div className=\"col-lg-4 col-md-5 col-sm-12\">{selectedNmbs}</div>\r\n    );\r\n};\r\n\r\nconst NumbersPool = (props) => {\r\n    let numberPool = [];\r\n    for (let i = 1; i < 10; i++) {\r\n        let classNames = ['num'];\r\n        classNames.push(props.usedNumbers.includes(i) ? 'used': props.selectedNumbers.includes(i) ? 'selected' : '');\r\n        numberPool.push(<span className={classNames.join(' ')} key={i} onClick={classNames.includes('used') ? null : classNames.includes('selected') ? () => props.handleUnpick(i) : () => props.handlePick(i)}>{i}</span>);\r\n    }\r\n    return (\r\n        <div className=\"col-12 text-center\">{numberPool}</div>\r\n    );\r\n};\r\n\r\nexport default class Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            numberOfStars: Math.floor(Math.random() * 9) + 1,\r\n            selectedNumbers: [],\r\n            usedNumbers:[],\r\n            refreshLeft: 10,\r\n            resultMsg: null,\r\n            isCorrent: null\r\n        };\r\n    }\r\n\r\n    handleEqual = (event) => {\r\n        let result = this.state.selectedNumbers.reduce((a, b) => a + b, 0) === this.state.numberOfStars ? true : false;\r\n        this.setState((prevState) => {\r\n            return result === true ? (prevState.usedNumbers.length === 8 ? {\r\n                resultMsg: 'Brilliant!',\r\n                selectedNumbers: [],\r\n                usedNumbers: [...prevState.usedNumbers, ...prevState.selectedNumbers],\r\n            } : {\r\n                numberOfStars: Math.floor(Math.random() * 9) + 1,\r\n                selectedNumbers: [],\r\n                usedNumbers: [...prevState.usedNumbers, ...prevState.selectedNumbers],\r\n                isCorrent: true\r\n            }) : {\r\n                isCorrent: false\r\n            }\r\n        });\r\n    }\r\n\r\n    handleRefresh = (event) => {\r\n        this.setState((prevState) => {\r\n            return prevState.refreshLeft === 1 ? {\r\n                resultMsg: 'Game Over!'\r\n            } : {\r\n                numberOfStars: Math.floor(Math.random() * 9) + 1,\r\n                refreshLeft: prevState.refreshLeft - 1,\r\n                selectedNumbers: []\r\n            }\r\n        });\r\n    }\r\n\r\n    handlePick = (props) => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                isCorrent: null,\r\n                selectedNumbers: [...prevState.selectedNumbers, props]\r\n            }\r\n        });\r\n    }\r\n\r\n    handleUnpick = (props) => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                selectedNumbers: prevState.selectedNumbers.filter(element => element !== props)\r\n            }\r\n        });\r\n    }\r\n\r\n    handleReplay = () => {\r\n        this.setState({\r\n            numberOfStars: Math.floor(Math.random() * 9) + 1,\r\n            selectedNumbers: [],\r\n            usedNumbers:[],\r\n            refreshLeft: 10,\r\n            resultMsg: null,\r\n            isCorrent: null\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {\r\n                    this.state.resultMsg ? \r\n                    <React.Fragment>\r\n                        <h1 className=\"text-center\">{this.state.resultMsg}</h1>\r\n                        <div className=\"text-center replay\" onClick={(e) => this.handleReplay(e)}><i className=\"fas fa-recycle\"></i>Play again...</div>\r\n                    </React.Fragment>\r\n                    :\r\n                    <div>\r\n                        <div className=\"row\">\r\n                            <Stars numberOfStars={this.state.numberOfStars} />\r\n                            <Button handleEqual={this.handleEqual} refreshLeft={this.state.refreshLeft} handleRefresh={this.handleRefresh} isCorrent={this.state.isCorrent} resultMsg={this.state.resultMsg} />\r\n                            <Anwser selectedNumbers={this.state.selectedNumbers} handleUnpick={this.handleUnpick} />\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <NumbersPool selectedNumbers={this.state.selectedNumbers} usedNumbers={this.state.usedNumbers} handlePick={this.handlePick} handleUnpick={this.handleUnpick} />\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport './bootstrap.min.css';\nimport './fontawesome-free-5.6.3-web/css/all.min.css';\n\n\nimport Game from './Game'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Play Nine</h1>\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}